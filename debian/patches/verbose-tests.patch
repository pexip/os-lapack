Description: sed -i -e 's#\(>\)\s*\($@\)\s*\(2>&1\)#\3 | tee \2#g' TESTING/Makefile
 Make the tests verbose (printing something to the screen) so that they
 won't timeout on buildd.
Author: Mo Zhou
Last-Update: 2019-09-13
Forwarded: not-needed
--- a/TESTING/Makefile
+++ b/TESTING/Makefile
@@ -158,61 +158,61 @@ complex16proto: $(ZLINTSTPROTO)
 
 stest.out: stest.in LIN/xlintsts
 	@echo Testing REAL LAPACK linear equation routines
-	./LIN/xlintsts < stest.in > $@ 2>&1
+	./LIN/xlintsts < stest.in 2>&1 | tee $@
 #
 # ======== COMPLEX LIN TESTS ==========================
 
 ctest.out: ctest.in LIN/xlintstc
 	@echo Testing COMPLEX LAPACK linear equation routines
-	./LIN/xlintstc < ctest.in > $@ 2>&1
+	./LIN/xlintstc < ctest.in 2>&1 | tee $@
 #
 # ======== DOUBLE LIN TESTS ===========================
 
 dtest.out: dtest.in LIN/xlintstd
 	@echo Testing DOUBLE PRECISION LAPACK linear equation routines
-	./LIN/xlintstd < dtest.in > $@ 2>&1
+	./LIN/xlintstd < dtest.in 2>&1 | tee $@
 #
 # ======== COMPLEX16 LIN TESTS ========================
 
 ztest.out: ztest.in LIN/xlintstz
 	@echo Testing COMPLEX16 LAPACK linear equation routines
-	./LIN/xlintstz < ztest.in > $@ 2>&1
+	./LIN/xlintstz < ztest.in 2>&1 | tee $@
 #
 # ======== SINGLE-DOUBLE PROTO LIN TESTS ==============
 
 dstest.out: dstest.in LIN/xlintstds
 	@echo Testing SINGLE-DOUBLE PRECISION LAPACK prototype linear equation routines
-	./LIN/xlintstds < dstest.in > $@ 2>&1
+	./LIN/xlintstds < dstest.in 2>&1 | tee $@
 #
 # ======== COMPLEX-COMPLEX16 LIN TESTS ========================
 
 zctest.out: zctest.in LIN/xlintstzc
 	@echo Testing COMPLEX-COMPLEX16 LAPACK prototype linear equation routines
-	./LIN/xlintstzc < zctest.in > $@ 2>&1
+	./LIN/xlintstzc < zctest.in 2>&1 | tee $@
 #
 # ======== SINGLE RFP LIN TESTS ========================
 
 stest_rfp.out: stest_rfp.in LIN/xlintstrfs
 	@echo Testing REAL LAPACK RFP prototype linear equation routines
-	./LIN/xlintstrfs < stest_rfp.in > $@ 2>&1
+	./LIN/xlintstrfs < stest_rfp.in 2>&1 | tee $@
 #
 # ======== COMPLEX16 RFP LIN TESTS ========================
 
 dtest_rfp.out: dtest_rfp.in LIN/xlintstrfd
 	@echo Testing DOUBLE PRECISION LAPACK RFP prototype linear equation routines
-	./LIN/xlintstrfd < dtest_rfp.in > $@ 2>&1
+	./LIN/xlintstrfd < dtest_rfp.in 2>&1 | tee $@
 #
 # ======== COMPLEX16 RFP LIN TESTS ========================
 
 ctest_rfp.out: ctest_rfp.in LIN/xlintstrfc
 	@echo Testing COMPLEX LAPACK RFP prototype linear equation routines
-	./LIN/xlintstrfc < ctest_rfp.in > $@ 2>&1
+	./LIN/xlintstrfc < ctest_rfp.in 2>&1 | tee $@
 #
 # ======== COMPLEX16 RFP LIN TESTS ========================
 
 ztest_rfp.out: ztest_rfp.in LIN/xlintstrfz
 	@echo Testing COMPLEX16 LAPACK RFP prototype linear equation routines
-	./LIN/xlintstrfz < ztest_rfp.in > $@ 2>&1
+	./LIN/xlintstrfz < ztest_rfp.in 2>&1 | tee $@
 #
 #
 # ======== SINGLE EIG TESTS ===========================
@@ -220,329 +220,329 @@ ztest_rfp.out: ztest_rfp.in LIN/xlintstr
 
 snep.out: nep.in EIG/xeigtsts
 	@echo NEP: Testing Nonsymmetric Eigenvalue Problem routines
-	./EIG/xeigtsts < nep.in > $@ 2>&1
+	./EIG/xeigtsts < nep.in 2>&1 | tee $@
 
 ssep.out: sep.in EIG/xeigtsts
 	@echo SEP: Testing Symmetric Eigenvalue Problem routines
-	./EIG/xeigtsts < sep.in > $@ 2>&1
+	./EIG/xeigtsts < sep.in 2>&1 | tee $@
 
 sse2.out: se2.in EIG/xeigtsts
 	@echo SEP: Testing Symmetric Eigenvalue Problem routines
-	./EIG/xeigtsts < se2.in > $@ 2>&1
+	./EIG/xeigtsts < se2.in 2>&1 | tee $@
 
 ssvd.out: svd.in EIG/xeigtsts
 	@echo SVD: Testing Singular Value Decomposition routines
-	./EIG/xeigtsts < svd.in > $@ 2>&1
+	./EIG/xeigtsts < svd.in 2>&1 | tee $@
 
 sec.out: sec.in EIG/xeigtsts
 	@echo SEC: Testing REAL Eigen Condition Routines
-	./EIG/xeigtsts < sec.in > $@ 2>&1
+	./EIG/xeigtsts < sec.in 2>&1 | tee $@
 
 sed.out: sed.in EIG/xeigtsts
 	@echo SEV: Testing REAL Nonsymmetric Eigenvalue Driver
-	./EIG/xeigtsts < sed.in > $@ 2>&1
+	./EIG/xeigtsts < sed.in 2>&1 | tee $@
 
 sgg.out: sgg.in EIG/xeigtsts
 	@echo SGG: Testing REAL Nonsymmetric Generalized Eigenvalue Problem routines
-	./EIG/xeigtsts < sgg.in > $@ 2>&1
+	./EIG/xeigtsts < sgg.in 2>&1 | tee $@
 
 sgd.out: sgd.in EIG/xeigtsts
 	@echo SGD: Testing REAL Nonsymmetric Generalized Eigenvalue Problem driver routines
-	./EIG/xeigtsts < sgd.in > $@ 2>&1
+	./EIG/xeigtsts < sgd.in 2>&1 | tee $@
 
 ssb.out: ssb.in EIG/xeigtsts
 	@echo SSB: Testing REAL Symmetric Eigenvalue Problem routines
-	./EIG/xeigtsts < ssb.in > $@ 2>&1
+	./EIG/xeigtsts < ssb.in 2>&1 | tee $@
 
 ssg.out: ssg.in EIG/xeigtsts
 	@echo SSG: Testing REAL Symmetric Generalized Eigenvalue Problem routines
-	./EIG/xeigtsts < ssg.in > $@ 2>&1
+	./EIG/xeigtsts < ssg.in 2>&1 | tee $@
 
 sbal.out: sbal.in EIG/xeigtsts
 	@echo SGEBAL: Testing the balancing of a REAL general matrix
-	./EIG/xeigtsts < sbal.in > $@ 2>&1
+	./EIG/xeigtsts < sbal.in 2>&1 | tee $@
 
 sbak.out: sbak.in EIG/xeigtsts
 	@echo SGEBAK: Testing the back transformation of a REAL balanced matrix
-	./EIG/xeigtsts < sbak.in > $@ 2>&1
+	./EIG/xeigtsts < sbak.in 2>&1 | tee $@
 
 sgbal.out: sgbal.in EIG/xeigtsts
 	@echo SGGBAL: Testing the balancing of a pair of REAL general matrices
-	./EIG/xeigtsts < sgbal.in > $@ 2>&1
+	./EIG/xeigtsts < sgbal.in 2>&1 | tee $@
 
 sgbak.out: sgbak.in EIG/xeigtsts
 	@echo SGGBAK: Testing the back transformation of a pair of REAL balanced matrices
-	./EIG/xeigtsts < sgbak.in > $@ 2>&1
+	./EIG/xeigtsts < sgbak.in 2>&1 | tee $@
 
 sbb.out: sbb.in EIG/xeigtsts
 	@echo SBB: Testing banded Singular Value Decomposition routines
-	./EIG/xeigtsts < sbb.in > $@ 2>&1
+	./EIG/xeigtsts < sbb.in 2>&1 | tee $@
 
 sglm.out: glm.in EIG/xeigtsts
 	@echo GLM: Testing Generalized Linear Regression Model routines
-	./EIG/xeigtsts < glm.in > $@ 2>&1
+	./EIG/xeigtsts < glm.in 2>&1 | tee $@
 
 sgqr.out: gqr.in EIG/xeigtsts
 	@echo GQR: Testing Generalized QR and RQ factorization routines
-	./EIG/xeigtsts < gqr.in > $@ 2>&1
+	./EIG/xeigtsts < gqr.in 2>&1 | tee $@
 
 sgsv.out: gsv.in EIG/xeigtsts
 	@echo GSV: Testing Generalized Singular Value Decomposition routines
-	./EIG/xeigtsts < gsv.in > $@ 2>&1
+	./EIG/xeigtsts < gsv.in 2>&1 | tee $@
 
 scsd.out: csd.in EIG/xeigtsts
 	@echo CSD: Testing CS Decomposition routines
-	./EIG/xeigtsts < csd.in > $@ 2>&1
+	./EIG/xeigtsts < csd.in 2>&1 | tee $@
 
 slse.out: lse.in EIG/xeigtsts
 	@echo LSE: Testing Constrained Linear Least Squares routines
-	./EIG/xeigtsts < lse.in > $@ 2>&1
+	./EIG/xeigtsts < lse.in 2>&1 | tee $@
 #
 # ======== COMPLEX EIG TESTS ===========================
 
 cnep.out: nep.in EIG/xeigtstc
 	@echo NEP: Testing Nonsymmetric Eigenvalue Problem routines
-	./EIG/xeigtstc < nep.in > $@ 2>&1
+	./EIG/xeigtstc < nep.in 2>&1 | tee $@
 
 csep.out: sep.in EIG/xeigtstc
 	@echo SEP: Testing Symmetric Eigenvalue Problem routines
-	./EIG/xeigtstc < sep.in > $@ 2>&1
+	./EIG/xeigtstc < sep.in 2>&1 | tee $@
 
 cse2.out: se2.in EIG/xeigtstc
 	@echo SEP: Testing Symmetric Eigenvalue Problem routines
-	./EIG/xeigtstc < se2.in > $@ 2>&1
+	./EIG/xeigtstc < se2.in 2>&1 | tee $@
 
 csvd.out: svd.in EIG/xeigtstc
 	@echo SVD: Testing Singular Value Decomposition routines
-	./EIG/xeigtstc < svd.in > $@ 2>&1
+	./EIG/xeigtstc < svd.in 2>&1 | tee $@
 
 cec.out: cec.in EIG/xeigtstc
 	@echo CEC: Testing COMPLEX Eigen Condition Routines
-	./EIG/xeigtstc < cec.in > $@ 2>&1
+	./EIG/xeigtstc < cec.in 2>&1 | tee $@
 
 ced.out: ced.in EIG/xeigtstc
 	@echo CES: Testing COMPLEX Nonsymmetric Schur Form Driver
-	./EIG/xeigtstc < ced.in > $@ 2>&1
+	./EIG/xeigtstc < ced.in 2>&1 | tee $@
 
 cgg.out: cgg.in EIG/xeigtstc
 	@echo CGG: Testing COMPLEX Nonsymmetric Generalized Eigenvalue Problem routines
-	./EIG/xeigtstc < cgg.in > $@ 2>&1
+	./EIG/xeigtstc < cgg.in 2>&1 | tee $@
 
 cgd.out: cgd.in EIG/xeigtstc
 	@echo CGD: Testing COMPLEX Nonsymmetric Generalized Eigenvalue Problem driver routines
-	./EIG/xeigtstc < cgd.in > $@ 2>&1
+	./EIG/xeigtstc < cgd.in 2>&1 | tee $@
 
 csb.out: csb.in EIG/xeigtstc
 	@echo CHB: Testing Hermitian Eigenvalue Problem routines
-	./EIG/xeigtstc < csb.in > $@ 2>&1
+	./EIG/xeigtstc < csb.in 2>&1 | tee $@
 
 csg.out: csg.in EIG/xeigtstc
 	@echo CSG: Testing Symmetric Generalized Eigenvalue Problem routines
-	./EIG/xeigtstc < csg.in > $@ 2>&1
+	./EIG/xeigtstc < csg.in 2>&1 | tee $@
 
 cbal.out: cbal.in EIG/xeigtstc
 	@echo CGEBAL: Testing the balancing of a COMPLEX general matrix
-	./EIG/xeigtstc < cbal.in > $@ 2>&1
+	./EIG/xeigtstc < cbal.in 2>&1 | tee $@
 
 cbak.out: cbak.in EIG/xeigtstc
 	@echo CGEBAK: Testing the back transformation of a COMPLEX balanced matrix
-	./EIG/xeigtstc < cbak.in > $@ 2>&1
+	./EIG/xeigtstc < cbak.in 2>&1 | tee $@
 
 cgbal.out: cgbal.in EIG/xeigtstc
 	@echo CGGBAL: Testing the balancing of a pair of COMPLEX general matrices
-	./EIG/xeigtstc < cgbal.in > $@ 2>&1
+	./EIG/xeigtstc < cgbal.in 2>&1 | tee $@
 
 cgbak.out: cgbak.in EIG/xeigtstc
 	@echo CGGBAK: Testing the back transformation of a pair of COMPLEX balanced matrices
-	./EIG/xeigtstc < cgbak.in > $@ 2>&1
+	./EIG/xeigtstc < cgbak.in 2>&1 | tee $@
 
 cbb.out: cbb.in EIG/xeigtstc
 	@echo CBB: Testing banded Singular Value Decomposition routines
-	./EIG/xeigtstc < cbb.in > $@ 2>&1
+	./EIG/xeigtstc < cbb.in 2>&1 | tee $@
 
 cglm.out: glm.in EIG/xeigtstc
 	@echo GLM: Testing Generalized Linear Regression Model routines
-	./EIG/xeigtstc < glm.in > $@ 2>&1
+	./EIG/xeigtstc < glm.in 2>&1 | tee $@
 
 cgqr.out: gqr.in EIG/xeigtstc
 	@echo GQR: Testing Generalized QR and RQ factorization routines
-	./EIG/xeigtstc < gqr.in > $@ 2>&1
+	./EIG/xeigtstc < gqr.in 2>&1 | tee $@
 
 cgsv.out: gsv.in EIG/xeigtstc
 	@echo GSV: Testing Generalized Singular Value Decomposition routines
-	./EIG/xeigtstc < gsv.in > $@ 2>&1
+	./EIG/xeigtstc < gsv.in 2>&1 | tee $@
 
 ccsd.out: csd.in EIG/xeigtstc
 	@echo CSD: Testing CS Decomposition routines
-	./EIG/xeigtstc < csd.in > $@ 2>&1
+	./EIG/xeigtstc < csd.in 2>&1 | tee $@
 
 clse.out: lse.in EIG/xeigtstc
 	@echo LSE: Testing Constrained Linear Least Squares routines
-	./EIG/xeigtstc < lse.in > $@ 2>&1
+	./EIG/xeigtstc < lse.in 2>&1 | tee $@
 #
 # ======== DOUBLE EIG TESTS ===========================
 
 dnep.out: nep.in EIG/xeigtstd
 	@echo NEP: Testing Nonsymmetric Eigenvalue Problem routines
-	./EIG/xeigtstd < nep.in > $@ 2>&1
+	./EIG/xeigtstd < nep.in 2>&1 | tee $@
 
 dsep.out: sep.in EIG/xeigtstd
 	@echo SEP: Testing Symmetric Eigenvalue Problem routines
-	./EIG/xeigtstd < sep.in > $@ 2>&1
+	./EIG/xeigtstd < sep.in 2>&1 | tee $@
 
 dse2.out: se2.in EIG/xeigtstd
 	@echo SEP: Testing Symmetric Eigenvalue Problem routines
-	./EIG/xeigtstd < se2.in > $@ 2>&1
+	./EIG/xeigtstd < se2.in 2>&1 | tee $@
 
 dsvd.out: svd.in EIG/xeigtstd
 	@echo SVD: Testing Singular Value Decomposition routines
-	./EIG/xeigtstd < svd.in > $@ 2>&1
+	./EIG/xeigtstd < svd.in 2>&1 | tee $@
 
 dec.out: dec.in EIG/xeigtstd
 	@echo DEC: Testing DOUBLE PRECISION Eigen Condition Routines
-	./EIG/xeigtstd < dec.in > $@ 2>&1
+	./EIG/xeigtstd < dec.in 2>&1 | tee $@
 
 ded.out: ded.in EIG/xeigtstd
 	@echo DEV: Testing DOUBLE PRECISION Nonsymmetric Eigenvalue Driver
-	./EIG/xeigtstd < ded.in > $@ 2>&1
+	./EIG/xeigtstd < ded.in 2>&1 | tee $@
 
 dgg.out: dgg.in EIG/xeigtstd
 	@echo DGG: Testing DOUBLE PRECISION Nonsymmetric Generalized Eigenvalue Problem routines
-	./EIG/xeigtstd < dgg.in > $@ 2>&1
+	./EIG/xeigtstd < dgg.in 2>&1 | tee $@
 
 dgd.out: dgd.in EIG/xeigtstd
 	@echo DGD: Testing DOUBLE PRECISION Nonsymmetric Generalized Eigenvalue Problem driver routines
-	./EIG/xeigtstd < dgd.in > $@ 2>&1
+	./EIG/xeigtstd < dgd.in 2>&1 | tee $@
 
 dsb.out: dsb.in EIG/xeigtstd
 	@echo DSB: Testing DOUBLE PRECISION Symmetric Eigenvalue Problem routines
-	./EIG/xeigtstd < dsb.in > $@ 2>&1
+	./EIG/xeigtstd < dsb.in 2>&1 | tee $@
 
 dsg.out: dsg.in EIG/xeigtstd
 	@echo DSG: Testing DOUBLE PRECISION Symmetric Generalized Eigenvalue Problem routines
-	./EIG/xeigtstd < dsg.in > $@ 2>&1
+	./EIG/xeigtstd < dsg.in 2>&1 | tee $@
 
 dbal.out: dbal.in EIG/xeigtstd
 	@echo DGEBAL: Testing the balancing of a DOUBLE PRECISION general matrix
-	./EIG/xeigtstd < dbal.in > $@ 2>&1
+	./EIG/xeigtstd < dbal.in 2>&1 | tee $@
 
 dbak.out: dbak.in EIG/xeigtstd
 	@echo DGEBAK: Testing the back transformation of a DOUBLE PRECISION balanced matrix
-	./EIG/xeigtstd < dbak.in > $@ 2>&1
+	./EIG/xeigtstd < dbak.in 2>&1 | tee $@
 
 dgbal.out: dgbal.in EIG/xeigtstd
 	@echo DGGBAL: Testing the balancing of a pair of DOUBLE PRECISION general matrices
-	./EIG/xeigtstd < dgbal.in > $@ 2>&1
+	./EIG/xeigtstd < dgbal.in 2>&1 | tee $@
 
 dgbak.out: dgbak.in EIG/xeigtstd
 	@echo DGGBAK: Testing the back transformation of a pair of DOUBLE PRECISION balanced matrices
-	./EIG/xeigtstd < dgbak.in > $@ 2>&1
+	./EIG/xeigtstd < dgbak.in 2>&1 | tee $@
 
 dbb.out: dbb.in EIG/xeigtstd
 	@echo DBB: Testing banded Singular Value Decomposition routines
-	./EIG/xeigtstd < dbb.in > $@ 2>&1
+	./EIG/xeigtstd < dbb.in 2>&1 | tee $@
 
 dglm.out: glm.in EIG/xeigtstd
 	@echo GLM: Testing Generalized Linear Regression Model routines
-	./EIG/xeigtstd < glm.in > $@ 2>&1
+	./EIG/xeigtstd < glm.in 2>&1 | tee $@
 
 dgqr.out: gqr.in EIG/xeigtstd
 	@echo GQR: Testing Generalized QR and RQ factorization routines
-	./EIG/xeigtstd < gqr.in > $@ 2>&1
+	./EIG/xeigtstd < gqr.in 2>&1 | tee $@
 
 dgsv.out: gsv.in EIG/xeigtstd
 	@echo GSV: Testing Generalized Singular Value Decomposition routines
-	./EIG/xeigtstd < gsv.in > $@ 2>&1
+	./EIG/xeigtstd < gsv.in 2>&1 | tee $@
 
 dcsd.out: csd.in EIG/xeigtstd
 	@echo CSD: Testing CS Decomposition routines
-	./EIG/xeigtstd < csd.in > $@ 2>&1
+	./EIG/xeigtstd < csd.in 2>&1 | tee $@
 
 dlse.out: lse.in EIG/xeigtstd
 	@echo LSE: Testing Constrained Linear Least Squares routines
-	./EIG/xeigtstd < lse.in > $@ 2>&1
+	./EIG/xeigtstd < lse.in 2>&1 | tee $@
 #
 # ======== COMPLEX16 EIG TESTS ===========================
 
 znep.out: nep.in EIG/xeigtstz
 	@echo NEP: Testing Nonsymmetric Eigenvalue Problem routines
-	./EIG/xeigtstz < nep.in > $@ 2>&1
+	./EIG/xeigtstz < nep.in 2>&1 | tee $@
 
 zsep.out: sep.in EIG/xeigtstz
 	@echo SEP: Testing Symmetric Eigenvalue Problem routines
-	./EIG/xeigtstz < sep.in > $@ 2>&1
+	./EIG/xeigtstz < sep.in 2>&1 | tee $@
 
 zse2.out: se2.in EIG/xeigtstz
 	@echo SEP: Testing Symmetric Eigenvalue Problem routines
-	./EIG/xeigtstz < se2.in > $@ 2>&1
+	./EIG/xeigtstz < se2.in 2>&1 | tee $@
 
 zsvd.out: svd.in EIG/xeigtstz
 	@echo SVD: Testing Singular Value Decomposition routines
-	./EIG/xeigtstz < svd.in > $@ 2>&1
+	./EIG/xeigtstz < svd.in 2>&1 | tee $@
 
 zec.out: zec.in EIG/xeigtstz
 	@echo ZEC: Testing COMPLEX16 Eigen Condition Routines
-	./EIG/xeigtstz < zec.in > $@ 2>&1
+	./EIG/xeigtstz < zec.in 2>&1 | tee $@
 
 zed.out: zed.in EIG/xeigtstz
 	@echo ZES: Testing COMPLEX16 Nonsymmetric Schur Form Driver
-	./EIG/xeigtstz < zed.in > $@ 2>&1
+	./EIG/xeigtstz < zed.in 2>&1 | tee $@
 
 zgg.out: zgg.in EIG/xeigtstz
 	@echo ZGG: Testing COMPLEX16 Nonsymmetric Generalized Eigenvalue Problem routines
-	./EIG/xeigtstz < zgg.in > $@ 2>&1
+	./EIG/xeigtstz < zgg.in 2>&1 | tee $@
 
 zgd.out: zgd.in EIG/xeigtstz
 	@echo ZGD: Testing COMPLEX16 Nonsymmetric Generalized Eigenvalue Problem driver routines
-	./EIG/xeigtstz < zgd.in > $@ 2>&1
+	./EIG/xeigtstz < zgd.in 2>&1 | tee $@
 
 zsb.out: zsb.in EIG/xeigtstz
 	@echo ZHB: Testing Hermitian Eigenvalue Problem routines
-	./EIG/xeigtstz < zsb.in > $@ 2>&1
+	./EIG/xeigtstz < zsb.in 2>&1 | tee $@
 
 zsg.out: zsg.in EIG/xeigtstz
 	@echo ZSG: Testing Symmetric Generalized Eigenvalue Problem routines
-	./EIG/xeigtstz < zsg.in > $@ 2>&1
+	./EIG/xeigtstz < zsg.in 2>&1 | tee $@
 
 zbal.out: zbal.in EIG/xeigtstz
 	@echo ZGEBAL: Testing the balancing of a COMPLEX16 general matrix
-	./EIG/xeigtstz < zbal.in > $@ 2>&1
+	./EIG/xeigtstz < zbal.in 2>&1 | tee $@
 
 zbak.out: zbak.in EIG/xeigtstz
 	@echo ZGEBAK: Testing the back transformation of a COMPLEX16 balanced matrix
-	./EIG/xeigtstz < zbak.in > $@ 2>&1
+	./EIG/xeigtstz < zbak.in 2>&1 | tee $@
 
 zgbal.out: zgbal.in EIG/xeigtstz
 	@echo ZGGBAL: Testing the balancing of a pair of COMPLEX general matrices
-	./EIG/xeigtstz < zgbal.in > $@ 2>&1
+	./EIG/xeigtstz < zgbal.in 2>&1 | tee $@
 
 zgbak.out: zgbak.in EIG/xeigtstz
 	@echo ZGGBAK: Testing the back transformation of a pair of COMPLEX16 balanced matrices
-	./EIG/xeigtstz < zgbak.in > $@ 2>&1
+	./EIG/xeigtstz < zgbak.in 2>&1 | tee $@
 
 zbb.out: zbb.in EIG/xeigtstz
 	@echo ZBB: Testing banded Singular Value Decomposition routines
-	./EIG/xeigtstz < zbb.in > $@ 2>&1
+	./EIG/xeigtstz < zbb.in 2>&1 | tee $@
 
 zglm.out: glm.in EIG/xeigtstz
 	@echo GLM: Testing Generalized Linear Regression Model routines
-	./EIG/xeigtstz < glm.in > $@ 2>&1
+	./EIG/xeigtstz < glm.in 2>&1 | tee $@
 
 zgqr.out: gqr.in EIG/xeigtstz
 	@echo GQR: Testing Generalized QR and RQ factorization routines
-	./EIG/xeigtstz < gqr.in > $@ 2>&1
+	./EIG/xeigtstz < gqr.in 2>&1 | tee $@
 
 zgsv.out: gsv.in EIG/xeigtstz
 	@echo GSV: Testing Generalized Singular Value Decomposition routines
-	./EIG/xeigtstz < gsv.in > $@ 2>&1
+	./EIG/xeigtstz < gsv.in 2>&1 | tee $@
 
 zcsd.out: csd.in EIG/xeigtstz
 	@echo CSD: Testing CS Decomposition routines
-	./EIG/xeigtstz < csd.in > $@ 2>&1
+	./EIG/xeigtstz < csd.in 2>&1 | tee $@
 
 zlse.out: lse.in EIG/xeigtstz
 	@echo LSE: Testing Constrained Linear Least Squares routines
-	./EIG/xeigtstz < lse.in > $@ 2>&1
+	./EIG/xeigtstz < lse.in 2>&1 | tee $@
 # ==============================================================================
 
 LIN/xlintsts: $(FRCLIN) $(FRC)
